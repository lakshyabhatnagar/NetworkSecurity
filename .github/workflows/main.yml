name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md

jobs:
    integration:
        name: Continuous Integration
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Code
            uses: actions/checkout@v3

          - name: Lint Code
            run: echo "Linting repository"

          - name: Run unit tests
            run: echo "Running unit tests"
    build-and-push-ecr-image:
        name: Continuous Delivery
        runs-on: ubuntu-latest
        needs: integration
        steps:
          - name: Checkout Code
            uses: actions/checkout@v3

          - name: Install utilities
            run: |
                sudo apt-get update 
                sudo apt-get install -y jq unzip

          - name: configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v3
            with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}
          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
          - name: Build, tag and push image to Amazon ECR
            id: build-image
            env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
              IMAGE_TAG: latest
            run: |
              if [ -z "$ECR_REPOSITORY" ]; then
                echo "ECR_REPOSITORY is empty. Did you set AWS_ECR_REPOSITORY_NAME in GitHub secrets?"
                exit 1
              fi
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    Continuous-Deployment:
        name: Continuous Deployment
        runs-on: self-hosted
        needs: build-and-push-ecr-image
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v3
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Pull the latest image
              run: |
                    echo "Pulling the latest image"
                    docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.AWS_ECR_REPOSITORY_NAME }}:latest

            - name: Run Docker Image to serve users
              run: |
                    echo "Running the Docker image"
                    docker run -d -p 8080:8080 --ipc="host" --name=networksecurity -e 'AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}' -e 'AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}' -e 'AWS_REGION=${{secrets.AWS_REGION}}' ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.AWS_ECR_REPOSITORY_NAME }}:latest
            - name: Clean previous containers
              run: |
                    docker system prune -f
          

            